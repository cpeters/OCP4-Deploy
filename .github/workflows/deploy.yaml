name: Deploy
on:
  push:
    branches:
      - 'main'
    paths:
      - 'deploy.md'
  workflow_dispatch:

jobs:
  Setup:
    name: Setup OpenShift Installer Binary
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - name: Setup Working Directory for OCP Install
        run: |
          perl -pi -e 's/RED_HAT_PULLSECRET/${{ secrets.RED_HAT_PULLSECRET }}/' install-config.yaml
          perl -pi -e 's/OCP_BASE_DOMAIN/${{ secrets.OCP_BASE_DOMAIN }}/' install-config.yaml
          perl -pi -e 's/OCP_CLUSTER_NAME/${{ secrets.OCP_CLUSTER_NAME }}/' install-config.yaml
          perl -pi -e 's/AWS_REGION/${{ secrets.AWS_REGION }}/' install-config.yaml
          mkdir ocp-artifact
          cp install-config.yaml ocp-artifact/
          cat ocp-artifact/install-config.yaml

      - name: Install OpenShift CLI tools
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          openshift-install: "${{secrets.OCP_CLIENT_VERSION}}"
          oc: "${{secrets.OCP_CLIENT_VERSION}}"
          # Search through these projects' GitHub releases, instead of the OpenShift Mirror.
          # https://docs.github.com/en/actions/reference/authentication-in-a-workflow
          source: "github"
          # Using GitHub token from the github context
          github_pat: ${{ github.token }}

      - name: Create OpenShift Cluster
        run: openshift-install create cluster --dir=ocp-artifact/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

      - name: Save Artifacts for Destroy
        uses: actions/upload-artifact@v2
        with:
          name: ocp-artifact
          path: ocp-artifact

      - name: Setup HTPasswd IDP
        run: |
          export KUBECONFIG=ocp-artifact/auth/kubeconfig
          oc apply -f gitops-operator.yaml -n openshift-operators
          echo "Creating htpasswd file"
          htpasswd -c -b -B htpasswd ${{ secrets.OCP_ADMIN_USER }} ${{ secrets.OCP_ADMIN_PASS }}
          htpasswd -b -B htpasswd ${{ secrets.OCP_DEV_USER }} ${{ secrets.OCP_DEV_PASS }}
          oc create secret generic htpass-secret --from-file=htpasswd=htpasswd -n openshift-config --dry-run -o yaml | oc apply -f -
          oc apply -f cluster-oauth.yaml
          sleep 300
          oc adm policy add-cluster-role-to-user cluster-admin ${{ secrets.OCP_ADMIN_USER }}
          oc adm policy add-cluster-role-to-user cluster-admin -z openshift-gitops-argocd-application-controller
          
      - name: Get Infra ID
        run: |
          export infraID=`cat ocp-artifact/metadata.json | jq -r .infraID`
          export KUBECONFIG=ocp-artifact/auth/kubeconfig
          echo $infraID
          perl -pi -e "s/{{ infraID }}/$infraID/g" infra-machineset.yaml
          perl -pi -e 's/{{ regionID }}/${{ secrets.AWS_REGION }}/g' infra-machineset.yaml
          cat infra-machineset.yaml
          oc create -f infra-machineset.yaml -n openshift-machine-api
          
    

          echo "----------------------------"
          echo "Your cluster API URL is:"
          oc whoami --show-server
          echo "----------------------------"
          echo "Your cluster console URL is:"
          oc whoami --show-console
          echo "----------------------------"

#          oc set data secret openshift-gitops-cluster -n openshift-gitops admin.password=${{ secrets.ADMIN_PASS }}
#      - name: Setup GitHub IDP
#        run: |
#          export KUBECONFIG=ocp-artifact/auth/kubeconfig
#          oc get nodes
#          oc create secret generic github-client-secret --from-literal=clientSecret=${{ secrets.CLIENT_SECRET }} -n openshift-config
#          oc apply -f idp-oauth.yaml
#          oc adm policy add-cluster-role-to-user cluster-admin ${{ secrets.CLUSTER_ADMIN }}
#          oc delete secrets kubeadmin -n kube-system --ignore-not-found=true

#      - name: Deploy ArgoCD
#        run: |
#          export KUBECONFIG=ocp-artifact/auth/kubeconfig
#          oc create namespace argocd
#          oc apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
#          oc patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
#          curl -sSL -o ~/ https://github.com/argoproj/argo-cd/releases/download/v1.7.14/argocd-linux-amd64
#          chmod +x argocd


#      - name: Setup Red Hat Advanced Cluster Manager in GitOps
#        run: |
#          export KUBECONFIG=ocp-artifact/auth/kubeconfig
#          oc create -f https://raw.githubusercontent.com/r3dact3d/gitops/ocp4/acm_build1/cluster.yaml

